module timereplication
import org.apache.commons.math3.util.FastMath.max
import org.apache.commons.math3.util.FastMath.pow
import protelis:lang:time

def reduce(tuple, fn) {
	if (tuple.size() <= 1) {
		tuple.get(0)
	} else {
		fn.apply(tuple.get(0),reduce(tuple.subTupleEnd(1),fn))
	}
}

def networkDiameter() {
	env.get("diameter")
}

def distributedClock(persistence) {
	rep (clock <- 0) {
		if(cyclicTimer(networkDiameter(), 1)) { // Here it could be nd() * parameter
			clock + 1
		} else {
			clock
		}
	}
}

/*
 * This function should return false if the clock is out of date (namely: no node in the network is still on that clock).
 */
def isCurrent(currentClock, clock, persistence) {
	currentClock - clock <= max(1, persistence)
}

def isNewClock(tuple, clock) {
	tuple.filter(self, (inner) -> {inner.get(0) == clock}).isEmpty()
}

public def timeReplicated(process, persistence, alpha) {
	let clock = distributedClock(persistence);
	let default = process.apply();
	let prcs = rep(processes <- [[clock, [process, default]]]) {
		/*
		 * Add process if the clock is new
		 */
		if(isNewClock(processes, clock)) {
			processes = processes.append([clock, [process, default]])
		};
		/*
		 * Align on clock, execute process
		 */
		alignedMap(
			nbr(processes),
			/*
			 * Filter out old processes. 
			 */
			 (pclock, processField) -> {isCurrent(clock, pclock, persistence)},
			 /*
			  * Here, processField should contain the same process for everybody. We just need to get one and run it.
			  * The result must be a tuple of the form [process, processResult].
			  */
			 (clock, processField) -> {
			 	let theProcess = hoodPlusSelf((p1, p2) -> {p1}, process, processField.get(0));
			 	[theProcess, theProcess.apply()]
			 },
			 [process, default]
		)
		/*
		 * The alignedMap outputs a [[clock0, [process0, result0]], [clock1, process1, result1], ...]
		 * This tuple should get reduced.
		 * The correct result to display is the last one which is stable for every node, namely the oldest
		 * valid clock.
		 * Valid filtering is already performed by alignedMap, so there is just a pick-the-minimum reduction to do.
		 */
	};
	let sum = prcs.map(t -> {
		let exp = clock - t.get(0);
		let val = t.get(1).get(1);
		val * pow(alpha, exp)
	}).reduce( (v1, v2) -> {v1 + v2});
//	let num = prcs.ma
//	env.put(process.toString(), prcs);
//	prcs.reduce(self, [clock, [process, default]],
//		(pt1, pt2) -> {
//			let exp = clock - pt
//			if (pt1.get(0) < pt2.get(0)) {
//				pt1
//			} else {
//				pt2
//			}
//		}
//	).get(1).get(1)
	sum * (1 - alpha) / (1 - pow(alpha, prcs.size() + 1))
}

