name: CI/CD Process
on:
  workflow_call:
  workflow_dispatch:

jobs:
  # Runs all tests
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows, macos, ubuntu ]
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 120
    concurrency:
      group: ${{ github.workflow }}-build-${{ matrix.os }}-${{ github.event.number || github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: DanySK/action-checkout@0.2.14
      - uses: DanySK/build-check-deploy-gradle-action@2.3.1
        with:
          build-command: >-
            ./gradlew assemble shadowJar --parallel ||
            ./gradlew assemble shadowJar --parallel ||
            ./gradlew assemble shadowJar --parallel
          deploy-command: >-
            ./gradlew uploadKotlin close drop --parallel ||
            ./gradlew uploadKotlin close drop --parallel ||
            ./gradlew uploadKotlin close drop --parallel
          should-run-codecov: ${{ runner.os == 'Linux' }}
          should-deploy: >-
            ${{
              runner.os == 'Linux'
              && !github.event.repository.fork
              && github.event_name != 'pull_request'
            }}
          gradle-publish-secret: ${{ secrets.GRADLE_PUBLISH_SECRET }}
          gradle-publish-key: ${{ secrets.GRADLE_PUBLISH_KEY }}
          maven-central-password: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          signing-key: ${{ secrets.SIGNING_KEY }}
          signing-password: ${{ secrets.SIGNING_PASSWORD }}
  # Performs a release if needed
  release:
    needs:
      - build
    runs-on: ubuntu-latest
    if: >-
      !github.event.repository.fork
      && github.event_name != 'pull_request'
    concurrency:
      group: release
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          submodules: recursive
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
      - uses: DanySK/build-check-deploy-gradle-action@2.3.1
        with:
          build-command: true
          check-command: true
          deploy-command: |
            [ -n "$CUSTOM_SECRET_0" ]
            [ -n "$CUSTOM_SECRET_1" ]
            export SURGE_LOGIN="$CUSTOM_SECRET_0"
            export SURGE_TOKEN="$CUSTOM_SECRET_1"
            npm install --global surge
            npm install
            npx semantic-release
          should-run-codecov: false
          should-deploy: true
          custom-secret-0: ${{ secrets.SURGE_LOGIN }}
          custom-secret-1: ${{ secrets.SURGE_TOKEN }}
          github-token: ${{ secrets.DEPLOYMENT_TOKEN }}
          gradle-publish-secret: ${{ secrets.GRADLE_PUBLISH_SECRET }}
          gradle-publish-key: ${{ secrets.GRADLE_PUBLISH_KEY }}
          maven-central-password: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          signing-key: ${{ secrets.SIGNING_KEY }}
          signing-password: ${{ secrets.SIGNING_PASSWORD }}
  success:
    runs-on: ubuntu-latest
    needs:
      - build
      - release
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}
